{"version":3,"sources":["node_modules/geotiff/src/compression/lzw.js"],"names":["MIN_BITS","CLEAR_CODE","EOI_CODE","MAX_BYTELENGTH","getByte","array","position","length","d","a","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","chunks","chunk2","hi","chunk3","appendReversed","dest","source","i","push","decompress","input","dictionaryIndex","Uint16Array","dictionaryChar","Uint8Array","dictionaryLength","byteLength","initDictionary","getNext","byte","addToDictionary","c","getDictionaryReversed","n","rev","result","code","oldCode","Error","val","oldVal","undefined","LZWDecoder","BaseDecoder","decodeBlock","buffer"],"mappings":"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","file":"lzw.5f5e461f.js","sourceRoot":"..","sourcesContent":["import BaseDecoder from './basedecoder';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"]}