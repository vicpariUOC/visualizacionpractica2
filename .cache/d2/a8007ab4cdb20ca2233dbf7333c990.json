{"id":"gQDJ","dependencies":[{"name":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\package.json","includedInParent":true,"mtime":1655155295911},{"name":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\package.json","includedInParent":true,"mtime":1655153729991},{"name":"../symbols","loc":{"line":1,"column":45,"index":45},"parent":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist-esm\\master\\thread.js","resolved":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist-esm\\symbols.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Thread = void 0;\n\nvar _symbols = require(\"../symbols\");\n\nfunction fail(message) {\n  throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\n\n\nconst Thread = {\n  /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n  errors(thread) {\n    return thread[_symbols.$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n  },\n\n  /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n  events(thread) {\n    return thread[_symbols.$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n  },\n\n  /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n  terminate(thread) {\n    return thread[_symbols.$terminate]();\n  }\n\n};\nexports.Thread = Thread;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":9},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":2,"column":9},"name":"fail"},{"generated":{"line":10,"column":13},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":14},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":2,"column":14},"name":"message"},{"generated":{"line":10,"column":21},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":23},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":2,"column":23}},{"generated":{"line":11,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":3,"column":4}},{"generated":{"line":11,"column":8},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":3,"column":10},"name":"Error"},{"generated":{"line":11,"column":13},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":3,"column":15}},{"generated":{"line":11,"column":14},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":3,"column":16},"name":"message"},{"generated":{"line":11,"column":21},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":3,"column":15}},{"generated":{"line":11,"column":22},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":3,"column":4}},{"generated":{"line":12,"column":0},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":4,"column":1}},{"generated":{"line":13,"column":0},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":5,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7}},{"generated":{"line":16,"column":6},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":13},"name":"Thread"},{"generated":{"line":16,"column":12},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":19}},{"generated":{"line":16,"column":15},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":22}},{"generated":{"line":17,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":7,"column":4}},{"generated":{"line":18,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":8,"column":4},"name":"errors"},{"generated":{"line":18,"column":8},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":8,"column":10}},{"generated":{"line":18,"column":9},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":8,"column":11},"name":"thread"},{"generated":{"line":18,"column":15},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":8,"column":10}},{"generated":{"line":18,"column":17},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":8,"column":19}},{"generated":{"line":19,"column":4},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":8}},{"generated":{"line":19,"column":11},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":15},"name":"thread"},{"generated":{"line":19,"column":17},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":21}},{"generated":{"line":19,"column":18},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":22},"name":"$errors"},{"generated":{"line":19,"column":34},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":21}},{"generated":{"line":19,"column":35},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":15}},{"generated":{"line":19,"column":39},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":34},"name":"fail"},{"generated":{"line":19,"column":43},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":38}},{"generated":{"line":19,"column":44},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":39}},{"generated":{"line":19,"column":145},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":38}},{"generated":{"line":19,"column":146},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":8}},{"generated":{"line":20,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":10,"column":5}},{"generated":{"line":20,"column":3},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":22}},{"generated":{"line":22,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":11,"column":4}},{"generated":{"line":23,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":12,"column":4},"name":"events"},{"generated":{"line":23,"column":8},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":12,"column":10}},{"generated":{"line":23,"column":9},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":12,"column":11},"name":"thread"},{"generated":{"line":23,"column":15},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":12,"column":10}},{"generated":{"line":23,"column":17},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":12,"column":19}},{"generated":{"line":24,"column":4},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":8}},{"generated":{"line":24,"column":11},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":15},"name":"thread"},{"generated":{"line":24,"column":17},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":21}},{"generated":{"line":24,"column":18},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":22},"name":"$events"},{"generated":{"line":24,"column":34},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":21}},{"generated":{"line":24,"column":35},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":15}},{"generated":{"line":24,"column":39},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":34},"name":"fail"},{"generated":{"line":24,"column":43},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":38}},{"generated":{"line":24,"column":44},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":39}},{"generated":{"line":24,"column":146},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":38}},{"generated":{"line":24,"column":147},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":8}},{"generated":{"line":25,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":14,"column":5}},{"generated":{"line":25,"column":3},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":22}},{"generated":{"line":27,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":15,"column":4}},{"generated":{"line":28,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":16,"column":4},"name":"terminate"},{"generated":{"line":28,"column":11},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":16,"column":13}},{"generated":{"line":28,"column":12},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":16,"column":14},"name":"thread"},{"generated":{"line":28,"column":18},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":16,"column":13}},{"generated":{"line":28,"column":20},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":16,"column":22}},{"generated":{"line":29,"column":4},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":17,"column":8}},{"generated":{"line":29,"column":11},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":17,"column":15},"name":"thread"},{"generated":{"line":29,"column":17},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":17,"column":21}},{"generated":{"line":29,"column":18},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":17,"column":22},"name":"$terminate"},{"generated":{"line":29,"column":37},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":17,"column":21}},{"generated":{"line":29,"column":38},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":17,"column":15}},{"generated":{"line":29,"column":40},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":17,"column":8}},{"generated":{"line":30,"column":2},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":18,"column":5}},{"generated":{"line":32,"column":0},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":22}},{"generated":{"line":32,"column":1},"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7}}],"sources":{"node_modules/threads/dist-esm/master/thread.js":"import { $errors, $events, $terminate } from \"../symbols\";\nfunction fail(message) {\n    throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\nexport const Thread = {\n    /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n    errors(thread) {\n        return thread[$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n    events(thread) {\n        return thread[$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n    terminate(thread) {\n        return thread[$terminate]();\n    }\n};\n"},"lineCount":null}},"error":null,"hash":"dbccf759c9f9ce720e462367a2fa9d3a","cacheData":{"env":{}}}