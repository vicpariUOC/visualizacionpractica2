{"id":"vJ4U","dependencies":[{"name":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\package.json","includedInParent":true,"mtime":1655155295911},{"name":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\package.json","includedInParent":true,"mtime":1655153729991},{"name":"is-observable","loc":{"line":16,"column":48,"index":1044},"parent":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\worker\\index.js","resolved":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\is-observable\\index.js"},{"name":"../common","loc":{"line":21,"column":23,"index":1296},"parent":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\worker\\index.js","resolved":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\common.js"},{"name":"../transferable","loc":{"line":23,"column":29,"index":1473},"parent":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\worker\\index.js","resolved":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\transferable.js"},{"name":"../types/messages","loc":{"line":19,"column":27,"index":1180},"parent":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\worker\\index.js","resolved":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\types\\messages.js"},{"name":"./implementation","loc":{"line":20,"column":49,"index":1251},"parent":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\worker\\index.js","resolved":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\worker\\implementation.browser.js"},{"name":"process","parent":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\threads\\dist\\worker\\index.js","resolved":"C:\\Users\\vpariente_profile\\DEV\\mcd\\visualizacion\\visualizacionpractica2\\node_modules\\process\\browser.js"}],"generated":{"js":"var process = require(\"process\");\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expose = exports.isWorkerRuntime = exports.Transfer = exports.registerSerializer = void 0;\nconst is_observable_1 = __importDefault(require(\"is-observable\"));\nconst common_1 = require(\"../common\");\nconst transferable_1 = require(\"../transferable\");\nconst messages_1 = require(\"../types/messages\");\nconst implementation_1 = __importDefault(require(\"./implementation\"));\nvar common_2 = require(\"../common\");\nObject.defineProperty(exports, \"registerSerializer\", { enumerable: true, get: function () { return common_2.registerSerializer; } });\nvar transferable_2 = require(\"../transferable\");\nObject.defineProperty(exports, \"Transfer\", { enumerable: true, get: function () { return transferable_2.Transfer; } });\n/** Returns `true` if this code is currently running in a worker. */\nexports.isWorkerRuntime = implementation_1.default.isWorkerRuntime;\nlet exposeCalled = false;\nconst activeSubscriptions = new Map();\nconst isMasterJobCancelMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.cancel;\nconst isMasterJobRunMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.run;\n/**\n * There are issues with `is-observable` not recognizing zen-observable's instances.\n * We are using `observable-fns`, but it's based on zen-observable, too.\n */\nconst isObservable = (thing) => is_observable_1.default(thing) || isZenObservable(thing);\nfunction isZenObservable(thing) {\n    return thing && typeof thing === \"object\" && typeof thing.subscribe === \"function\";\n}\nfunction deconstructTransfer(thing) {\n    return transferable_1.isTransferDescriptor(thing)\n        ? { payload: thing.send, transferables: thing.transferables }\n        : { payload: thing, transferables: undefined };\n}\nfunction postFunctionInitMessage() {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"function\"\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postModuleInitMessage(methodNames) {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"module\",\n            methods: methodNames\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postJobErrorMessage(uid, rawError) {\n    const { payload: error, transferables } = deconstructTransfer(rawError);\n    const errorMessage = {\n        type: messages_1.WorkerMessageType.error,\n        uid,\n        error: common_1.serialize(error)\n    };\n    implementation_1.default.postMessageToMaster(errorMessage, transferables);\n}\nfunction postJobResultMessage(uid, completed, resultValue) {\n    const { payload, transferables } = deconstructTransfer(resultValue);\n    const resultMessage = {\n        type: messages_1.WorkerMessageType.result,\n        uid,\n        complete: completed ? true : undefined,\n        payload\n    };\n    implementation_1.default.postMessageToMaster(resultMessage, transferables);\n}\nfunction postJobStartMessage(uid, resultType) {\n    const startMessage = {\n        type: messages_1.WorkerMessageType.running,\n        uid,\n        resultType\n    };\n    implementation_1.default.postMessageToMaster(startMessage);\n}\nfunction postUncaughtErrorMessage(error) {\n    try {\n        const errorMessage = {\n            type: messages_1.WorkerMessageType.uncaughtError,\n            error: common_1.serialize(error)\n        };\n        implementation_1.default.postMessageToMaster(errorMessage);\n    }\n    catch (subError) {\n        // tslint:disable-next-line no-console\n        console.error(\"Not reporting uncaught error back to master thread as it \" +\n            \"occured while reporting an uncaught error already.\" +\n            \"\\nLatest error:\", subError, \"\\nOriginal error:\", error);\n    }\n}\nfunction runFunction(jobUID, fn, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let syncResult;\n        try {\n            syncResult = fn(...args);\n        }\n        catch (error) {\n            return postJobErrorMessage(jobUID, error);\n        }\n        const resultType = isObservable(syncResult) ? \"observable\" : \"promise\";\n        postJobStartMessage(jobUID, resultType);\n        if (isObservable(syncResult)) {\n            const subscription = syncResult.subscribe(value => postJobResultMessage(jobUID, false, common_1.serialize(value)), error => {\n                postJobErrorMessage(jobUID, common_1.serialize(error));\n                activeSubscriptions.delete(jobUID);\n            }, () => {\n                postJobResultMessage(jobUID, true);\n                activeSubscriptions.delete(jobUID);\n            });\n            activeSubscriptions.set(jobUID, subscription);\n        }\n        else {\n            try {\n                const result = yield syncResult;\n                postJobResultMessage(jobUID, true, common_1.serialize(result));\n            }\n            catch (error) {\n                postJobErrorMessage(jobUID, common_1.serialize(error));\n            }\n        }\n    });\n}\n/**\n * Expose a function or a module (an object whose values are functions)\n * to the main thread. Must be called exactly once in every worker thread\n * to signal its API to the main thread.\n *\n * @param exposed Function or object whose values are functions\n */\nfunction expose(exposed) {\n    if (!implementation_1.default.isWorkerRuntime()) {\n        throw Error(\"expose() called in the master thread.\");\n    }\n    if (exposeCalled) {\n        throw Error(\"expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.\");\n    }\n    exposeCalled = true;\n    if (typeof exposed === \"function\") {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && !messageData.method) {\n                runFunction(messageData.uid, exposed, messageData.args.map(common_1.deserialize));\n            }\n        });\n        postFunctionInitMessage();\n    }\n    else if (typeof exposed === \"object\" && exposed) {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && messageData.method) {\n                runFunction(messageData.uid, exposed[messageData.method], messageData.args.map(common_1.deserialize));\n            }\n        });\n        const methodNames = Object.keys(exposed).filter(key => typeof exposed[key] === \"function\");\n        postModuleInitMessage(methodNames);\n    }\n    else {\n        throw Error(`Invalid argument passed to expose(). Expected a function or an object, got: ${exposed}`);\n    }\n    implementation_1.default.subscribeToMasterMessages(messageData => {\n        if (isMasterJobCancelMessage(messageData)) {\n            const jobUID = messageData.uid;\n            const subscription = activeSubscriptions.get(jobUID);\n            if (subscription) {\n                subscription.unsubscribe();\n                activeSubscriptions.delete(jobUID);\n            }\n        }\n    });\n}\nexports.expose = expose;\nif (typeof self !== \"undefined\" && typeof self.addEventListener === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    self.addEventListener(\"error\", event => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(event.error || event), 250);\n    });\n    self.addEventListener(\"unhandledrejection\", event => {\n        const error = event.reason;\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\nif (typeof process !== \"undefined\" && typeof process.on === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    process.on(\"uncaughtException\", (error) => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(error), 250);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/threads/dist/worker/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/threads/dist/worker/index.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}}],"sources":{"node_modules/threads/dist/worker/index.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expose = exports.isWorkerRuntime = exports.Transfer = exports.registerSerializer = void 0;\nconst is_observable_1 = __importDefault(require(\"is-observable\"));\nconst common_1 = require(\"../common\");\nconst transferable_1 = require(\"../transferable\");\nconst messages_1 = require(\"../types/messages\");\nconst implementation_1 = __importDefault(require(\"./implementation\"));\nvar common_2 = require(\"../common\");\nObject.defineProperty(exports, \"registerSerializer\", { enumerable: true, get: function () { return common_2.registerSerializer; } });\nvar transferable_2 = require(\"../transferable\");\nObject.defineProperty(exports, \"Transfer\", { enumerable: true, get: function () { return transferable_2.Transfer; } });\n/** Returns `true` if this code is currently running in a worker. */\nexports.isWorkerRuntime = implementation_1.default.isWorkerRuntime;\nlet exposeCalled = false;\nconst activeSubscriptions = new Map();\nconst isMasterJobCancelMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.cancel;\nconst isMasterJobRunMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.run;\n/**\n * There are issues with `is-observable` not recognizing zen-observable's instances.\n * We are using `observable-fns`, but it's based on zen-observable, too.\n */\nconst isObservable = (thing) => is_observable_1.default(thing) || isZenObservable(thing);\nfunction isZenObservable(thing) {\n    return thing && typeof thing === \"object\" && typeof thing.subscribe === \"function\";\n}\nfunction deconstructTransfer(thing) {\n    return transferable_1.isTransferDescriptor(thing)\n        ? { payload: thing.send, transferables: thing.transferables }\n        : { payload: thing, transferables: undefined };\n}\nfunction postFunctionInitMessage() {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"function\"\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postModuleInitMessage(methodNames) {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"module\",\n            methods: methodNames\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postJobErrorMessage(uid, rawError) {\n    const { payload: error, transferables } = deconstructTransfer(rawError);\n    const errorMessage = {\n        type: messages_1.WorkerMessageType.error,\n        uid,\n        error: common_1.serialize(error)\n    };\n    implementation_1.default.postMessageToMaster(errorMessage, transferables);\n}\nfunction postJobResultMessage(uid, completed, resultValue) {\n    const { payload, transferables } = deconstructTransfer(resultValue);\n    const resultMessage = {\n        type: messages_1.WorkerMessageType.result,\n        uid,\n        complete: completed ? true : undefined,\n        payload\n    };\n    implementation_1.default.postMessageToMaster(resultMessage, transferables);\n}\nfunction postJobStartMessage(uid, resultType) {\n    const startMessage = {\n        type: messages_1.WorkerMessageType.running,\n        uid,\n        resultType\n    };\n    implementation_1.default.postMessageToMaster(startMessage);\n}\nfunction postUncaughtErrorMessage(error) {\n    try {\n        const errorMessage = {\n            type: messages_1.WorkerMessageType.uncaughtError,\n            error: common_1.serialize(error)\n        };\n        implementation_1.default.postMessageToMaster(errorMessage);\n    }\n    catch (subError) {\n        // tslint:disable-next-line no-console\n        console.error(\"Not reporting uncaught error back to master thread as it \" +\n            \"occured while reporting an uncaught error already.\" +\n            \"\\nLatest error:\", subError, \"\\nOriginal error:\", error);\n    }\n}\nfunction runFunction(jobUID, fn, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let syncResult;\n        try {\n            syncResult = fn(...args);\n        }\n        catch (error) {\n            return postJobErrorMessage(jobUID, error);\n        }\n        const resultType = isObservable(syncResult) ? \"observable\" : \"promise\";\n        postJobStartMessage(jobUID, resultType);\n        if (isObservable(syncResult)) {\n            const subscription = syncResult.subscribe(value => postJobResultMessage(jobUID, false, common_1.serialize(value)), error => {\n                postJobErrorMessage(jobUID, common_1.serialize(error));\n                activeSubscriptions.delete(jobUID);\n            }, () => {\n                postJobResultMessage(jobUID, true);\n                activeSubscriptions.delete(jobUID);\n            });\n            activeSubscriptions.set(jobUID, subscription);\n        }\n        else {\n            try {\n                const result = yield syncResult;\n                postJobResultMessage(jobUID, true, common_1.serialize(result));\n            }\n            catch (error) {\n                postJobErrorMessage(jobUID, common_1.serialize(error));\n            }\n        }\n    });\n}\n/**\n * Expose a function or a module (an object whose values are functions)\n * to the main thread. Must be called exactly once in every worker thread\n * to signal its API to the main thread.\n *\n * @param exposed Function or object whose values are functions\n */\nfunction expose(exposed) {\n    if (!implementation_1.default.isWorkerRuntime()) {\n        throw Error(\"expose() called in the master thread.\");\n    }\n    if (exposeCalled) {\n        throw Error(\"expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.\");\n    }\n    exposeCalled = true;\n    if (typeof exposed === \"function\") {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && !messageData.method) {\n                runFunction(messageData.uid, exposed, messageData.args.map(common_1.deserialize));\n            }\n        });\n        postFunctionInitMessage();\n    }\n    else if (typeof exposed === \"object\" && exposed) {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && messageData.method) {\n                runFunction(messageData.uid, exposed[messageData.method], messageData.args.map(common_1.deserialize));\n            }\n        });\n        const methodNames = Object.keys(exposed).filter(key => typeof exposed[key] === \"function\");\n        postModuleInitMessage(methodNames);\n    }\n    else {\n        throw Error(`Invalid argument passed to expose(). Expected a function or an object, got: ${exposed}`);\n    }\n    implementation_1.default.subscribeToMasterMessages(messageData => {\n        if (isMasterJobCancelMessage(messageData)) {\n            const jobUID = messageData.uid;\n            const subscription = activeSubscriptions.get(jobUID);\n            if (subscription) {\n                subscription.unsubscribe();\n                activeSubscriptions.delete(jobUID);\n            }\n        }\n    });\n}\nexports.expose = expose;\nif (typeof self !== \"undefined\" && typeof self.addEventListener === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    self.addEventListener(\"error\", event => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(event.error || event), 250);\n    });\n    self.addEventListener(\"unhandledrejection\", event => {\n        const error = event.reason;\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\nif (typeof process !== \"undefined\" && typeof process.on === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    process.on(\"uncaughtException\", (error) => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(error), 250);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\n"},"lineCount":210}},"error":null,"hash":"27274dc4a7b2c6cb2576ca5b2628c419","cacheData":{"env":{}}}